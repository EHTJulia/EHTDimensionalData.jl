var documenterSearchIndex = {"docs":
[{"location":"dimstack/#Custom-Methods-for-DimStack","page":"Custom DimStack Methods","title":"Custom Methods for DimStack","text":"","category":"section"},{"location":"dimstack/","page":"Custom DimStack Methods","title":"Custom DimStack Methods","text":"The package provides and aims to implement custom methods to handle the DimStack data type originally in DimensionalData.jl.","category":"page"},{"location":"dimstack/#Data-Selection","page":"Custom DimStack Methods","title":"Data Selection","text":"","category":"section"},{"location":"dimstack/","page":"Custom DimStack Methods","title":"Custom DimStack Methods","text":"The package partially overwrites the getindex method for the DimStack data type. Supposed that you have the following visds::DimStack data, which is a radio-astronomy interferometric data set loaded by EHTUVData.jl.","category":"page"},{"location":"dimstack/","page":"Custom DimStack Methods","title":"Custom DimStack Methods","text":"julia> visds\nDimStack with dimensions: \n  Dim{:ch} Sampled{Int64} Int64[1] ForwardOrdered Irregular Points,\n  Dim{:spw} Sampled{Int64} Int64[1, 2, 3, 4] ForwardOrdered Irregular Points,\n  Dim{:data} Sampled{Int64} Int64[1, 2, …, 55997, 55998] ForwardOrdered Irregular Points,\n  Dim{:pol} Sampled{Int64} Int64[1, 2, 3, 4] ForwardOrdered Irregular Points\nand 20 layers:\n  :visibility   ComplexF64 dims: Dim{:ch}, Dim{:spw}, Dim{:data}, Dim{:pol} (1×4×55998×4)\n  :sigma        Float64 dims: Dim{:ch}, Dim{:spw}, Dim{:data}, Dim{:pol} (1×4×55998×4)\n  :flag         Int8 dims: Dim{:ch}, Dim{:spw}, Dim{:data}, Dim{:pol} (1×4×55998×4)\n  :polarization String dims: Dim{:pol} (4)\n  :usec         Float64 dims: Dim{:data} (55998)\n  :vsec         Float64 dims: Dim{:data} (55998)\n  :wsec         Float64 dims: Dim{:data} (55998)\n  :mjd          Float64 dims: Dim{:data} (55998)\n  :Δmjd         Float64 dims: Dim{:data} (55998)\n  :antid1       Int64 dims: Dim{:data} (55998)\n  :antid2       Int64 dims: Dim{:data} (55998)\n  :scan         Int64 dims: Dim{:data} (55998)\n  :νspw         Float64 dims: Dim{:spw} (4)\n  :Δνch         Float64 dims: Dim{:spw} (4)\n  :sideband     Float64 dims: Dim{:spw} (4)\n  :ν            Float64 dims: Dim{:ch}, Dim{:spw} (1×4)\n  :u            Float64 dims: Dim{:ch}, Dim{:spw}, Dim{:data} (1×4×55998)\n  :v            Float64 dims: Dim{:ch}, Dim{:spw}, Dim{:data} (1×4×55998)\n  :w            Float64 dims: Dim{:ch}, Dim{:spw}, Dim{:data} (1×4×55998)\n  :uvdist       Float64 dims: Dim{:ch}, Dim{:spw}, Dim{:data} (1×4×55998)","category":"page"},{"location":"dimstack/","page":"Custom DimStack Methods","title":"Custom DimStack Methods","text":"We keep most of the getindex methods from DimensionalData.jl, for instance, you can select a specific DimArray in the DimStack data set by using a key::Symbol.","category":"page"},{"location":"dimstack/","page":"Custom DimStack Methods","title":"Custom DimStack Methods","text":"julia> # selecting `:u` array\njulia> u = visds[:u]\n1×4×55998 DimArray{Float64,3} u with dimensions: \n  Dim{:ch} Sampled{Int64} Int64[1] ForwardOrdered Irregular Points,\n  Dim{:spw} Sampled{Int64} Int64[1, 2, 3, 4] ForwardOrdered Irregular Points,\n  Dim{:data} Sampled{Int64} Int64[1, 2, …, 55997, 55998] ForwardOrdered Irregular Points\n[:, :, 1]\n         1         2     3           4\n 1  -96856.7  -97414.4  -1.00311e5  -1.00886e5\n[and 55997 more slices...]\n\njulia> # This is not a deepcopy. The slice is programmatically indistinguishable from the original data.\njulia> u === visds[:u]\ntrue","category":"page"},{"location":"dimstack/","page":"Custom DimStack Methods","title":"Custom DimStack Methods","text":"This package provides a custom getindex function for the array-index-based data selection useful for slicing. For instance, this visds data set has the following dimensions.","category":"page"},{"location":"dimstack/","page":"Custom DimStack Methods","title":"Custom DimStack Methods","text":"julia> dims(visds)\nDim{:ch} Sampled{Int64} Int64[1] ForwardOrdered Irregular Points,\nDim{:spw} Sampled{Int64} Int64[1, 2, 3, 4] ForwardOrdered Irregular Points,\nDim{:data} Sampled{Int64} Int64[1, 2, …, 55997, 55998] ForwardOrdered Irregular Points,\nDim{:pol} Sampled{Int64} Int64[1, 2, 3, 4] ForwardOrdered Irregular Points","category":"page"},{"location":"dimstack/","page":"Custom DimStack Methods","title":"Custom DimStack Methods","text":"We might want to select data at a specific set of :spw, :polarization and :data columns. This package allows an intuitive data selection similar to python's xarray data set, for instance,","category":"page"},{"location":"dimstack/","page":"Custom DimStack Methods","title":"Custom DimStack Methods","text":"julia> # slicing at :spw = 4, :data=100:10000, :polarization = 2\njulia> slice = visds[:, 4, 100:10000, 2]\nDimStack with dimensions: \n  Dim{:ch} Sampled{Int64} Int64[1] ForwardOrdered Irregular Points,\n  Dim{:spw} Sampled{Int64} Int64[4] ForwardOrdered Irregular Points,\n  Dim{:data} Sampled{Int64} Int64[100, 101, …, 9999, 10000] ForwardOrdered Irregular Points,\n  Dim{:pol} Sampled{Int64} Int64[2] ForwardOrdered Irregular Points\nand 20 layers:\n  :visibility   ComplexF64 dims: Dim{:ch}, Dim{:spw}, Dim{:data}, Dim{:pol} (1×1×9901×1)\n  :sigma        Float64 dims: Dim{:ch}, Dim{:spw}, Dim{:data}, Dim{:pol} (1×1×9901×1)\n  :flag         Int8 dims: Dim{:ch}, Dim{:spw}, Dim{:data}, Dim{:pol} (1×1×9901×1)\n  :polarization String dims: Dim{:pol} (1)\n  :usec         Float64 dims: Dim{:data} (9901)\n  :vsec         Float64 dims: Dim{:data} (9901)\n  :wsec         Float64 dims: Dim{:data} (9901)\n  :mjd          Float64 dims: Dim{:data} (9901)\n  :Δmjd         Float64 dims: Dim{:data} (9901)\n  :antid1       Int64 dims: Dim{:data} (9901)\n  :antid2       Int64 dims: Dim{:data} (9901)\n  :scan         Int64 dims: Dim{:data} (9901)\n  :νspw         Float64 dims: Dim{:spw} (1)\n  :Δνch         Float64 dims: Dim{:spw} (1)\n  :sideband     Float64 dims: Dim{:spw} (1)\n  :ν            Float64 dims: Dim{:ch}, Dim{:spw} (1×1)\n  :u            Float64 dims: Dim{:ch}, Dim{:spw}, Dim{:data} (1×1×9901)\n  :v            Float64 dims: Dim{:ch}, Dim{:spw}, Dim{:data} (1×1×9901)\n  :w            Float64 dims: Dim{:ch}, Dim{:spw}, Dim{:data} (1×1×9901)\n  :uvdist       Float64 dims: Dim{:ch}, Dim{:spw}, Dim{:data} (1×1×9901)","category":"page"},{"location":"dimstack/","page":"Custom DimStack Methods","title":"Custom DimStack Methods","text":"This will give a complete set of the slice. In the original DimensionalData, this sort of slicing is not generally allowed. Note that the index-based slice of DimStack is all deepcopy and programmatically distinguishable. This is coming from the nature of the original getindex function for DimArray in DimensionalData.jl.","category":"page"},{"location":"dimstack/","page":"Custom DimStack Methods","title":"Custom DimStack Methods","text":"julia> # slice is a deep copy of the original array data\njulia> slice[:visibility].data === visds[:visibility].data[:, 4, 100:10000, 2]\nfalse\njulia> slice[:visibility].data == visds[:visibility].data[:, 4, 100:10000, 2]\ntrue","category":"page"},{"location":"dimstack/#Append-a-DimArray-to-a-DimStack","page":"Custom DimStack Methods","title":"Append a DimArray to a DimStack","text":"","category":"section"},{"location":"dimstack/","page":"Custom DimStack Methods","title":"Custom DimStack Methods","text":"The package provides the append method to add a DimArray to the given DimStack data set.","category":"page"},{"location":"dimstack/","page":"Custom DimStack Methods","title":"Custom DimStack Methods","text":"append(ds::DimStack, array::DimArray)","category":"page"},{"location":"dimstack/#EHTDimensionalData.append-Tuple{DimStack, DimArray}","page":"Custom DimStack Methods","title":"EHTDimensionalData.append","text":"append(dataset::DimStack, array::DimArray)::DimStack\n\nAppend a DimArray data into the given DimStack data set. If there is already an array with the same key in DimStack, it will be overwritten by the array newly appended. The newly appended DimArray or other DimArrays inherited from the DimStack data set are programmatically indistinguishable from the original ones.\n\nExamples\n\njulia> # suppose that you add `da::DimArray` with the name of `:newcol` into `ds::DimStack`.\njulia> newds = append(ds, da)\n\njulia> # newds is a newly formed `DimStack` because `DimStack` uses `NamedTuple｀which is immutable.\njulia> newds == ds\nfalse\n\njulia> # The appended `DimArray` or any other `DimArray`s are programmatically indistinguishable.\njulia> newds[:newcol] === da\ntrue\njulia> newds[:orgcol] === ds[:orgcol]\ntrue\n\n\n\n\n\n","category":"method"},{"location":"dimstack/#Concatenate-two-DimStacks","page":"Custom DimStack Methods","title":"Concatenate two DimStacks","text":"","category":"section"},{"location":"dimstack/","page":"Custom DimStack Methods","title":"Custom DimStack Methods","text":"The package provides the concat method to concatenate two DimStack data sets.","category":"page"},{"location":"dimstack/","page":"Custom DimStack Methods","title":"Custom DimStack Methods","text":"concat(dataset1::DimStack, dataset2::DimStack)","category":"page"},{"location":"dimstack/#EHTDimensionalData.concat-Tuple{DimStack, DimStack}","page":"Custom DimStack Methods","title":"EHTDimensionalData.concat","text":"concat(dataset1::DimStack, dataset2::DimStack)::DimStack\n\nConcatanate two DimStack data sets. If keys are duplicated, dimarrays of dataset1 will be overwritten. DimArrays in the concatenated DimStack data set are programmatically indistinguishable from those in the original DimStack data sets.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = EHTDimensionalData","category":"page"},{"location":"#EHTDimensionalData","page":"Home","title":"EHTDimensionalData","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: Dev) (Image: Build Status) (Image: Coverage) (Image: Code Style: Blue)","category":"page"},{"location":"","page":"Home","title":"Home","text":"EHTDimensionalData.jl is an extension of DimensionalData.jl which provides an intuitive, self-descriptive ND-labeld data structures for Julia. This package works as a higher layer of DimensionalData.jl by reexporting its ecosystem through Reexport.jl with a set of custom functions for DimStack and DimArray data types including potential overwrites of some methods.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Assuming that you already have Julia correctly installed, it suffices to import EHTUtils.jl in the standard way:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"EHTDimensionalData\")","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"As EHTDimensionalData.jl will reexport all features in DimesinalData.jl along with custom methods, you will need to import only EHTDimensionalData.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using EHTDimensionalData","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you need to import both DimensionalData.jl and EHTDimensionalData.jl for some reasons, please import or using only specific functions to avoid conflicts.","category":"page"},{"location":"#Acknowledgements","page":"Home","title":"Acknowledgements","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The development of this package has been finantially supported by the following programs.","category":"page"},{"location":"","page":"Home","title":"Home","text":"AST-2107681, National Science Foundation, USA: v0.1.1 - present\nAST-2034306, National Science Foundation, USA: v0.1.1 - present\nOMA-2029670, National Science Foundation, USA: v0.1.1 - present\nAST-1935980, National Science Foundation, USA: v0.1.1 - present\nALMA North American Development Study Cycle 8, National Radio Astronomy Observatory (NRAO), USA: v0.1.0","category":"page"},{"location":"","page":"Home","title":"Home","text":"The National Radio Astronomy Observatory is a facility of the National Science Foundation operated under cooperative agreement by Associated Universities, Inc.","category":"page"}]
}
